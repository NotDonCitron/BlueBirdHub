version: '3.8'

services:
  # OrdnungsHub Backend
  ordnungshub-backend:
    build: .
    container_name: ordnungshub-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    environment:
      - NODE_ENV=production
      - PYTHON_ENV=production
      - DATABASE_URL=postgresql://ordnungshub:${DB_PASSWORD}@postgres:5432/ordnungshub_prod
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=INFO
      - WORKERS=4
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - AI_MODEL_PATH=/app/models
      - ENABLE_SMART_ORGANIZATION=true
    volumes:
      - ordnungshub_data:/app/data
      - ordnungshub_uploads:/app/uploads
      - ordnungshub_logs:/app/logs
      - ordnungshub_backups:/app/backups
      - ordnungshub_models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - ordnungshub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ordnungshub-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ordnungshub_prod
      - POSTGRES_USER=ordnungshub
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ordnungshub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ordnungshub -d ordnungshub_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ordnungshub-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - ordnungshub-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # OrdnungsHub Frontend
  ordnungshub-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ordnungshub-frontend
    restart: unless-stopped
    ports:
      - "3002:80"
    depends_on:
      - ordnungshub-backend
    networks:
      - ordnungshub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: ordnungshub-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ordnungshub_logs:/var/log/nginx
    depends_on:
      - ordnungshub-frontend
      - ordnungshub-backend
    networks:
      - ordnungshub-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ordnungshub-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ordnungshub-network
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ordnungshub-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ordnungshub-network
    profiles:
      - monitoring

volumes:
  ordnungshub_data:
  ordnungshub_uploads:
  ordnungshub_logs:
  ordnungshub_backups:
  ordnungshub_models:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ordnungshub-network:
    driver: bridge