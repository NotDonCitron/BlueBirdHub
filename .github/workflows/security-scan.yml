name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Python dependencies
      run: |
        pip install bandit safety semgrep
        pip install -r requirements.txt

    - name: Install Node dependencies
      run: npm install

    - name: Run Bandit security scanner (Python)
      run: |
        bandit -r src/backend -f json -o bandit-report.json -f txt -o bandit-report.txt
        cat bandit-report.txt
      continue-on-error: true

    - name: Run Safety vulnerability scanner (Python)
      run: |
        safety check --json --output safety-report.json
        safety check --output safety-report.txt
        cat safety-report.txt
      continue-on-error: true

    - name: Run Semgrep security scanner
      run: |
        semgrep --config=auto --json --output=semgrep-report.json src/
        semgrep --config=auto --output=semgrep-report.txt src/
        cat semgrep-report.txt
      continue-on-error: true

    - name: Run npm audit (Node.js)
      run: |
        npm audit --audit-level high --json > npm-audit-report.json
        npm audit --audit-level high > npm-audit-report.txt
        cat npm-audit-report.txt
      continue-on-error: true

    - name: Upload SAST results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sast-reports
        path: |
          bandit-report.*
          safety-report.*
          semgrep-report.*
          npm-audit-report.*

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-python-report.json
      continue-on-error: true

    - name: Run Snyk for Node.js dependencies
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-node-report.json
      continue-on-error: true

    - name: Upload Snyk reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-reports
        path: |
          snyk-*-report.json

  # Container security scanning
  container-scan:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: []
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: bluebirdub:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'bluebirdub:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (JSON format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'bluebirdub:security-scan'
        format: 'json'
        output: 'trivy-results.json'

    - name: Upload container scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-scan-reports
        path: |
          trivy-results.*

  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Setup Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        pip install -r requirements.txt
        pip install -r requirements-archon.txt

    - name: Setup Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Node dependencies
      if: matrix.language == 'javascript'
      run: npm install

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Secrets scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog secrets scanner
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  # License compliance scanning
  license-scan:
    name: License Compliance Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        pip install pip-licenses
        pip install -r requirements.txt
        npm install

    - name: Generate Python license report
      run: |
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --format=plain --output-file=python-licenses.txt

    - name: Generate Node.js license report
      run: |
        npx license-checker --json --out node-licenses.json
        npx license-checker --out node-licenses.txt

    - name: Check for prohibited licenses
      run: |
        # Check for GPL, LGPL, and other copyleft licenses
        python scripts/check-licenses.py python-licenses.json node-licenses.json
      continue-on-error: true

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: license-reports
        path: |
          *-licenses.*

  # Security summary report
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, container-scan, codeql-analysis, secrets-scan, license-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all security reports
      uses: actions/download-artifact@v3
      with:
        path: security-reports

    - name: Generate security summary
      run: |
        python scripts/generate-security-summary.py security-reports/ > security-summary.md
        cat security-summary.md
      continue-on-error: true

    - name: Create security issue on critical findings
      if: failure()
      uses: peter-evans/create-issue-from-file@v4
      with:
        title: 'Critical Security Vulnerabilities Found - ${{ github.sha }}'
        content-filepath: security-summary.md
        labels: |
          security
          critical
          vulnerability

    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üîê Security Scan Results\n\n${summary}`
          });

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-summary
        path: security-summary.md