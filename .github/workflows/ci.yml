name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm install
        pip install -r requirements.txt
        pip install -r requirements-archon.txt

    - name: Run ESLint
      run: npm run lint
      continue-on-error: true

    - name: Run TypeScript check
      run: npx tsc --noEmit
      continue-on-error: true

    - name: Run Python linting
      run: |
        pip install flake8 black isort mypy
        flake8 src/backend --max-line-length=88 --extend-ignore=E203,W503
        black --check src/backend
        isort --check-only --diff src/backend
      continue-on-error: true

    - name: Security scan with Bandit
      run: |
        pip install bandit
        bandit -r src/backend -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  # Backend Tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-archon.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Setup test environment
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key_for_ci
        JWT_SECRET_KEY: test_jwt_secret_for_ci
      run: |
        export DATABASE_URL=$DATABASE_URL
        export REDIS_URL=$REDIS_URL
        python scripts/init_database.py

    - name: Run backend unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key_for_ci
        JWT_SECRET_KEY: test_jwt_secret_for_ci
      run: |
        pytest tests/unit/ -v --cov=src/backend --cov-report=xml --cov-report=html

    - name: Run backend integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key_for_ci
        JWT_SECRET_KEY: test_jwt_secret_for_ci
      run: |
        pytest tests/integration/ -v

    - name: Run Archon tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key_for_ci
        JWT_SECRET_KEY: test_jwt_secret_for_ci
      run: |
        python scripts/archon_test_suite.py
      continue-on-error: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml

  # Frontend Tests
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Run unit tests
      run: npm run test:unit

    - name: Run React component tests
      run: npm run test:react

    - name: Generate test coverage
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          coverage/
          jest-report.xml

  # End-to-End Tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm install
        pip install -r requirements.txt
        npx playwright install

    - name: Build frontend
      run: npm run build

    - name: Setup test environment
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key_for_ci
        JWT_SECRET_KEY: test_jwt_secret_for_ci
      run: |
        python scripts/init_database.py

    - name: Start backend server
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key_for_ci
        JWT_SECRET_KEY: test_jwt_secret_for_ci
      run: |
        python -m uvicorn src.backend.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      
    - name: Start frontend server
      run: |
        npm run dev &
        sleep 10

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          playwright-report/
          test-results/

  # Build and Test Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-checks]
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker images
      run: |
        docker run --rm -d --name test-backend -p 8000:8000 \
          -e DATABASE_URL=sqlite:///test.db \
          -e SECRET_KEY=test_key \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker stop test-backend

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-docker]
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli

    - name: Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lighthouse-results
        path: .lighthouseci/

  # Deployment Status
  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-e2e, build-docker]
    if: always()

    steps:
    - name: Check deployment readiness
      run: |
        echo "Backend Tests: ${{ needs.test-backend.result }}"
        echo "Frontend Tests: ${{ needs.test-frontend.result }}"
        echo "E2E Tests: ${{ needs.test-e2e.result }}"
        echo "Docker Build: ${{ needs.build-docker.result }}"
        
        if [[ "${{ needs.test-backend.result }}" == "success" && 
              "${{ needs.test-frontend.result }}" == "success" && 
              "${{ needs.test-e2e.result }}" == "success" && 
              "${{ needs.build-docker.result }}" == "success" ]]; then
          echo "✅ All checks passed - Ready for deployment"
          echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
        else
          echo "❌ Some checks failed - Not ready for deployment"
          echo "DEPLOYMENT_READY=false" >> $GITHUB_ENV
        fi

    - name: Create deployment status
      if: github.event_name != 'pull_request'
      run: |
        echo "Deployment readiness: ${{ env.DEPLOYMENT_READY }}"
        # This can be extended to trigger actual deployments