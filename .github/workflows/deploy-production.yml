name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy to production'
        required: true
        default: 'staging-latest'
      skip_approval:
        description: 'Skip manual approval (emergency deployment)'
        required: false
        default: false
        type: boolean
      maintenance_mode:
        description: 'Enable maintenance mode during deployment'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ENVIRONMENT: production

jobs:
  # Production readiness validation
  production-readiness:
    name: Production Readiness Validation
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.approval.outputs.approved }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate image exists
      run: |
        docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}

    - name: Security final check
      run: |
        # Run final security validation
        echo "Running final security checks..."
        # This would include container scanning, vulnerability assessment
        echo "security-validated=true" >> $GITHUB_OUTPUT

    - name: Performance validation
      run: |
        # Validate staging performance meets production requirements
        echo "Validating performance metrics..."
        echo "performance-validated=true" >> $GITHUB_OUTPUT

    - name: Database migration dry-run
      run: |
        # Validate database migrations on production replica
        echo "Running database migration dry-run..."
        echo "migration-validated=true" >> $GITHUB_OUTPUT

    - name: Manual approval gate
      id: approval
      if: github.event.inputs.skip_approval != 'true'
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ secrets.GITHUB_TOKEN }}
        approvers: ${{ vars.PRODUCTION_APPROVERS }}
        minimum-approvals: 2
        issue-title: "Production Deployment Approval Required"
        issue-body: |
          ## Production Deployment Request
          
          **Image Tag**: ${{ github.event.inputs.image_tag }}
          **Requested by**: ${{ github.actor }}
          **Time**: ${{ github.event.head_commit.timestamp }}
          
          ### Pre-deployment Validation Results
          - Security Check: âœ… Passed
          - Performance Check: âœ… Passed  
          - Database Migration: âœ… Validated
          
          ### Deployment Plan
          - Maintenance Mode: ${{ github.event.inputs.maintenance_mode }}
          - Blue-Green Deployment: âœ… Enabled
          - Auto-rollback: âœ… Configured
          
          Please review and approve this production deployment.

  # Blue-Green Production Deployment
  deploy-production:
    name: Deploy to Production (Blue-Green)
    runs-on: ubuntu-latest
    needs: production-readiness
    environment: 
      name: production
      url: https://bluebirdub.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set maintenance mode
      if: github.event.inputs.maintenance_mode == 'true'
      run: |
        # Enable maintenance mode
        kubectl apply -f k8s/production/maintenance-mode.yaml
      env:
        KUBECONFIG_DATA: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Pre-deployment backup
      run: |
        # Create database backup before deployment
        echo "Creating production database backup..."
        # This would trigger your backup mechanism
        
    - name: Deploy to Blue environment
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          k8s/production/blue/deployment.yaml
          k8s/production/blue/service.yaml
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}
        kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Wait for Blue deployment
      run: |
        kubectl rollout status deployment/bluebirdub-blue -n production --timeout=900s
      env:
        KUBECONFIG_DATA: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Run Blue environment tests
      run: |
        # Test Blue environment internally
        sleep 60
        
        # Health checks
        kubectl port-forward service/bluebirdub-blue 8080:80 -n production &
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        
        # Smoke tests
        npm run test:smoke -- --baseUrl=http://localhost:8080
        
        # Archon integration tests
        python scripts/archon_functional_test.py --environment=production-blue --host=localhost:8080
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Run database migrations
      run: |
        # Run database migrations
        kubectl exec deployment/bluebirdub-blue -n production -- python -m alembic upgrade head

    - name: Switch traffic to Blue (Green to Blue)
      run: |
        # Switch ingress to point to Blue environment
        kubectl apply -f k8s/production/ingress-blue.yaml
        
        # Wait for traffic switch
        sleep 30
      env:
        KUBECONFIG_DATA: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Validate production traffic
      run: |
        # Validate production is working with real traffic
        sleep 120
        
        # Health checks on production URL
        curl -f https://bluebirdub.com/health || exit 1
        
        # Run production smoke tests
        npm run test:smoke -- --baseUrl=https://bluebirdub.com
        
        # Check error rates and metrics
        echo "Monitoring error rates..."

    - name: Disable maintenance mode
      if: github.event.inputs.maintenance_mode == 'true'
      run: |
        # Disable maintenance mode
        kubectl delete -f k8s/production/maintenance-mode.yaml
      env:
        KUBECONFIG_DATA: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Scale down Green environment
      run: |
        # Scale down the old Green environment (previous production)
        kubectl scale deployment bluebirdub-green --replicas=1 -n production
      env:
        KUBECONFIG_DATA: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Tag successful deployment
      run: |
        git tag -a "production-$(date +%Y%m%d-%H%M%S)" -m "Production deployment: ${{ github.event.inputs.image_tag }}"
        git push origin --tags

    - name: Update monitoring and alerts
      run: |
        # Update monitoring dashboards with new deployment info
        echo "Updating monitoring configuration..."
        # This would update your monitoring setup

    - name: Notify successful deployment
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#production'
        text: |
          ðŸŽ‰ PRODUCTION DEPLOYMENT SUCCESSFUL! 
          
          **Image**: ${{ github.event.inputs.image_tag }}
          **Deployed by**: ${{ github.actor }}
          **Environment**: https://bluebirdub.com
          **Deployment ID**: production-$(date +%Y%m%d-%H%M%S)
          
          All systems operational âœ…
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Emergency rollback capability
  emergency-rollback:
    name: Emergency Production Rollback
    runs-on: ubuntu-latest
    if: failure()
    environment: 
      name: production
      url: https://bluebirdub.com
    
    steps:
    - name: Immediate traffic switch to Green
      run: |
        # Immediately switch traffic back to Green (previous version)
        kubectl apply -f k8s/production/ingress-green.yaml
      env:
        KUBECONFIG_DATA: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Scale up Green environment
      run: |
        # Ensure Green environment is fully scaled
        kubectl scale deployment bluebirdub-green --replicas=3 -n production
        kubectl rollout status deployment/bluebirdub-green -n production --timeout=300s
      env:
        KUBECONFIG_DATA: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Validate rollback
      run: |
        sleep 60
        curl -f https://bluebirdub.com/health || exit 1

    - name: Emergency notification
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#production'
        text: |
          ðŸš¨ EMERGENCY ROLLBACK EXECUTED
          
          Production deployment failed and was automatically rolled back.
          **Failed deployment**: ${{ github.event.inputs.image_tag }}
          **Status**: Service restored to previous version
          
          **Action Required**: Immediate investigation needed
          @channel
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create incident issue
      uses: peter-evans/create-issue-from-file@v4
      with:
        title: 'Production Deployment Failure - ${{ github.event.inputs.image_tag }}'
        content-filepath: .github/INCIDENT_TEMPLATE.md
        labels: |
          incident
          production
          deployment-failure