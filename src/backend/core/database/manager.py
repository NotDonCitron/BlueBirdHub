"""
Database Manager - Generated by Archon AI System
Implements the database abstraction layer from Archon's recommendations
"""

from __future__ import annotations
import os
from typing import Optional

from sqlalchemy import create_engine, event
from sqlalchemy.orm import sessionmaker, scoped_session, DeclarativeBase
from sqlalchemy.pool import QueuePool
from sqlalchemy_utils import database_exists, create_database

class Base(DeclarativeBase):
    """Base class for all database models"""
    pass

class DatabaseManager:
    _instance: Optional[DatabaseManager] = None
    
    def __init__(self, connection_string: str = None):
        self.connection_string = connection_string or self._get_connection_string()
        
        # Ensure database exists
        if not database_exists(self.connection_string):
            create_database(self.connection_string)
        
        # Create engine with connection pooling
        self.engine = create_engine(
            self.connection_string,
            poolclass=QueuePool,
            pool_size=10,
            max_overflow=20,
            pool_timeout=30,
            pool_recycle=1800  # Recycle connections every 30 minutes
        )
        
        # Create session factory
        self.SessionLocal = scoped_session(
            sessionmaker(
                bind=self.engine, 
                autocommit=False, 
                autoflush=False
            )
        )
    
    @classmethod
    def get_instance(cls, connection_string: str = None) -> DatabaseManager:
        """Singleton pattern for database manager"""
        if not cls._instance:
            cls._instance = DatabaseManager(connection_string)
        return cls._instance
    
    def _get_connection_string(self) -> str:
        """Retrieve database connection string from environment"""
        db_type = os.getenv('DB_TYPE', 'postgresql')
        db_user = os.getenv('DB_USER', 'bluebbird')
        db_pass = os.getenv('DB_PASS', 'secure_password')
        db_host = os.getenv('DB_HOST', 'localhost')
        db_name = os.getenv('DB_NAME', 'bluebbirdhub')
        
        if db_type == 'sqlite':
            return f'sqlite:////{db_name}.db'
        else:
            return f'{db_type}://{db_user}:{db_pass}@{db_host}/{db_name}'
    
    def get_session(self):
        """Provide a database session"""
        session = self.SessionLocal()
        try:
            yield session
        finally:
            session.close()
    
    def init_models(self):
        """Create all database tables"""
        Base.metadata.create_all(bind=self.engine)
