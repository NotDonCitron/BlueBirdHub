services:
  # BlueBirdHub Backend
  bluebbird-backend:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: runtime
    container_name: bluebbird-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PYTHON_ENV=production
      - DATABASE_URL=postgresql://bluebbirdhub:${DB_PASSWORD}@postgres:5432/bluebbirdhub_prod
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS=${WORKERS:-4}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ENABLE_SMART_ORGANIZATION=${ENABLE_SMART_ORGANIZATION:-true}
      - ENABLE_AI_FEATURES=${ENABLE_AI_FEATURES:-true}
    volumes:
      - bluebbird_data:/app/data
      - bluebbird_uploads:/app/uploads
      - bluebbird_logs:/app/logs
      - bluebbird_backups:/app/backups
      - bluebbird_models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - bluebbird-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bluebbird-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=bluebbirdhub_prod
      - POSTGRES_USER=bluebbirdhub
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bluebbird-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bluebbirdhub -d bluebbirdhub_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bluebbird-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - bluebbird-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: bluebbird-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - bluebbird_logs:/var/log/nginx
    depends_on:
      - bluebbird-backend
    networks:
      - bluebbird-network
    profiles:
      - production

volumes:
  bluebbird_data:
  bluebbird_uploads:
  bluebbird_logs:
  bluebbird_backups:
  bluebbird_models:
  postgres_data:
  redis_data:

networks:
  bluebbird-network:
    driver: bridge 