{
  "permissions": {
    "allow": [
      "Bash(rg:*)",
      "Bash(git worktree:*)",
      "Bash(git branch:*)",
      "Bash(mkdir:*)",
      "Bash(git clone:*)",
      "Bash(ls:*)",
      "Bash(./run-server.sh:*)",
      "Bash(env)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git merge:*)",
      "Bash(git stash:*)",
      "Bash(npm start)",
      "Bash(pnpm run:*)",
      "Bash(npm run dev:*)",
      "Bash(./dev.sh:*)",
      "Bash(pip install:*)",
      "Bash(npm install)",
      "Bash(python3 -m pip:*)",
      "Bash(true)",
      "Bash(rm:*)",
      "Bash(curl:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(git checkout:*)",
      "Bash(npm test)",
      "Bash(python -m pytest tests/unit/test_files_api.py -v)",
      "Bash(python -m pytest tests/unit/test_file_manager.py -v)",
      "Bash(python3 -m pytest tests/unit/test_files_api.py -v)",
      "Bash(python3:*)",
      "Bash(npm run test:react:*)",
      "Bash(npm run build:react:*)",
      "Bash(cp:*)",
      "Bash(npm install:*)",
      "Bash(ss:*)",
      "Bash(docker logs:*)",
      "Bash(docker exec:*)",
      "Bash(docker port:*)",
      "Bash(docker inspect:*)",
      "Bash(docker stop:*)",
      "Bash(docker rm:*)",
      "Bash(npm audit:*)",
      "Bash(chmod:*)",
      "Bash(node:*)",
      "Bash(./worktrees/sync-script.sh:*)",
      "allow all",
      "Bash(python:*)",
      "Bash(touch:*)",
      "Bash(docker-compose:*)",
      "Bash(npm run:*)",
      "Bash(npm test:*)",
      "Bash(./test-ci-locally.sh:*)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "Bash(pip --version)",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(.venv/Scripts/pip.exe:*)",
      "Bash(docker:*)",
      "Bash(PYTHONPATH=/app/.venv/Lib/site-packages python3 -c \"\ntry:\n    import fastapi, uvicorn, redis, prometheus_client\n    print(''✅ All required packages available'')\n    from main import app\n    print(''✅ Main app imports successfully'')\n    print(''✅ Available endpoints:'')\n    for route in app.routes:\n        if hasattr(route, ''path''):\n            print(f''  {route.methods if hasattr(route, \"\"methods\"\") else \"\"GET\"\"} {route.path}'')\nexcept Exception as e:\n    print(f''❌ Error: {e}'')\n\")",
      "Bash(echo)",
      "Bash(echo:*)",
      "Bash(gcloud:*)",
      "Bash(npx claude-flow@latest init --sparc)",
      "Bash(npx:*)",
      "Bash(timeout 180 npx claude-flow sparc run architect \"Simplify worktree management and reduce code duplication\")",
      "Bash(./claude-flow start --ui)",
      "Bash(./claude-flow.sh start:*)",
      "Bash(./claude-flow.sh:*)",
      "Bash(pkill:*)",
      "Bash(timeout:*)",
      "Bash(kill:*)",
      "Bash(npm --version)",
      "Bash(CORS_ORIGINS=\"http://localhost:3002,http://127.0.0.1:3002,http://localhost:3000,http://127.0.0.1:3000,http://localhost:3001,http://127.0.0.1:3001\" docker-compose up -d ordnungshub-backend)",
      "Bash(cat:*)",
      "Bash(gcc:*)",
      "Bash(rustc --version)",
      "Bash(go:*)",
      "Bash(git push:*)",
      "Bash(git remote:*)",
      "WebFetch(domain:github.com)",
      "Bash(bash /mnt/c/Users/pasca/BlueBirdHub/test-all-functions.bat)",
      "Bash(bash:*)",
      "Bash(dos2unix:*)",
      "Bash(sed:*)",
      "Bash(./.venv/Scripts/python:*)",
      "Bash(pgrep:*)",
      "Bash(pip3 freeze:*)",
      "Bash(pip3 list:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(git reset:*)",
      "Bash(mv:*)",
      "Bash(OUTPUT_DIR=\"/mnt/c/Users/pasca/BlueBirdHub/outputs/ai_service_enhancement_$(date +%Y%m%d_%H%M%S)\")",
      "Bash(export:*)"
    ],
    "deny": []
  }
}