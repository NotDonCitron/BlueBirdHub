name: Deploy to Staging

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ENVIRONMENT: staging

jobs:
  # Quality gates before staging deployment
  pre-deployment-checks:
    name: Pre-deployment Quality Gates
    runs-on: ubuntu-latest
    outputs:
      deployment-approved: ${{ steps.quality-gate.outputs.approved }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check test coverage
      id: coverage-check
      run: |
        # This would typically pull coverage from codecov or similar
        COVERAGE_THRESHOLD=80
        echo "Checking test coverage threshold: ${COVERAGE_THRESHOLD}%"
        echo "coverage-passed=true" >> $GITHUB_OUTPUT

    - name: Check security scan results
      id: security-check
      run: |
        # Check for critical security vulnerabilities
        echo "Checking security scan results..."
        echo "security-passed=true" >> $GITHUB_OUTPUT

    - name: Quality gate decision
      id: quality-gate
      run: |
        if [[ "${{ steps.coverage-check.outputs.coverage-passed }}" == "true" && 
              "${{ steps.security-check.outputs.security-passed }}" == "true" ]]; then
          echo "‚úÖ All quality gates passed"
          echo "approved=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Quality gates failed"
          echo "approved=false" >> $GITHUB_OUTPUT
        fi

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.deployment-approved == 'true'
    environment: 
      name: staging
      url: https://staging.bluebirdub.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push staging images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          ENVIRONMENT=staging
          BUILD_VERSION=${{ github.sha }}

    - name: Deploy to staging infrastructure
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          k8s/staging/deployment.yaml
          k8s/staging/service.yaml
          k8s/staging/ingress.yaml
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
        kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

    - name: Wait for deployment rollout
      run: |
        kubectl rollout status deployment/bluebirdub-staging -n staging --timeout=600s
      env:
        KUBECONFIG_DATA: ${{ secrets.STAGING_KUBECONFIG }}

    - name: Run post-deployment tests
      run: |
        # Wait for services to be fully ready
        sleep 60
        
        # Run health checks
        curl -f https://staging.bluebirdub.com/health || exit 1
        
        # Run smoke tests
        npm run test:smoke -- --baseUrl=https://staging.bluebirdub.com
        
        # Run Archon integration tests
        python scripts/archon_functional_test.py --environment=staging --host=staging.bluebirdub.com
      env:
        STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Performance baseline test
      run: |
        # Run performance tests and compare with baseline
        npm install -g @lhci/cli
        lhci autorun --upload.target=temporary-public-storage
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#deployments'
        text: |
          üöÄ Staging deployment successful!
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Environment: https://staging.bluebirdub.com
          Ready for production approval
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create production deployment PR
      if: success()
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: prepare production deployment for ${{ github.sha }}'
        title: 'Production Deployment: ${{ github.sha }}'
        body: |
          ## Production Deployment Request
          
          **Staging Validation**: ‚úÖ Passed
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          
          ### Staging Environment Results
          - Health checks: ‚úÖ Passed
          - Smoke tests: ‚úÖ Passed
          - Archon integration: ‚úÖ Passed
          - Performance baseline: ‚úÖ Passed
          
          ### Pre-production Checklist
          - [ ] Security review completed
          - [ ] Database migration plan reviewed
          - [ ] Rollback plan confirmed
          - [ ] Monitoring alerts configured
          
          **Staging URL**: https://staging.bluebirdub.com
        branch: production-deploy-${{ github.sha }}
        base: main

  rollback-staging:
    name: Rollback Staging Deployment
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Rollback to previous version
      run: |
        kubectl rollout undo deployment/bluebirdub-staging -n staging
      env:
        KUBECONFIG_DATA: ${{ secrets.STAGING_KUBECONFIG }}
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: |
          ‚ö†Ô∏è Staging deployment failed and was rolled back
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}